{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar SimpleCache = function () {\n  function SimpleCache() {\n    _classCallCheck(this, SimpleCache);\n\n    this.cache = {};\n  }\n\n  _createClass(SimpleCache, [{\n    key: \"get\",\n    value: function get(url) {\n      return this.cache[url];\n    }\n  }, {\n    key: \"set\",\n    value: function set(url, promise) {\n      var _this = this;\n\n      this.cache[url] = promise;\n      promise.then(function (_ref) {\n        var error = _ref.error;\n\n        if (error) {\n          _this.remove(url);\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(url) {\n      delete this.cache[url];\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // TODO: Wait for all outstanding promises to resolve?\n      //   `Promise.all(Object.values(cache)).then(() => this.cache = {})` (untested)\n      this.cache = {};\n    }\n  }]);\n\n  return SimpleCache;\n}();\n\nexports.default = SimpleCache;","map":null,"metadata":{},"sourceType":"script"}