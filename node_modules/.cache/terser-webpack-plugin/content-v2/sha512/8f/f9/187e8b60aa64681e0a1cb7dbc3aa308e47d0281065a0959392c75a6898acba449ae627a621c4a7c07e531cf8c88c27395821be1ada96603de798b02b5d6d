{"map":"{\"version\":3,\"sources\":[\"D:\\\\Works\\\\20ScoopCNX\\\\20scoopcnx-quiz\\\\src\\\\searchUser.js\",\"D:\\\\Works\\\\20ScoopCNX\\\\20scoopcnx-quiz\\\\src\\\\viewUserDetail.js\",\"D:\\\\Works\\\\20ScoopCNX\\\\20scoopcnx-quiz\\\\src\\\\App.js\",\"D:\\\\Works\\\\20ScoopCNX\\\\20scoopcnx-quiz\\\\src\\\\serviceWorker.js\",\"D:\\\\Works\\\\20ScoopCNX\\\\20scoopcnx-quiz\\\\src\\\\index.js\"],\"names\":[\"searchUser\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"error\",\"isLoaded\",\"items\",\"_this2\",\"fetch\",\"then\",\"res\",\"json\",\"result\",\"setState\",\"_this$state\",\"react_default\",\"a\",\"createElement\",\"message\",\"map\",\"item\",\"key\",\"id\",\"src\",\"alt\",\"login\",\"url\",\"Component\",\"viewUserDetail\",\"App\",\"className\",\"react_router\",\"path\",\"component\",\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"registerValidSW\",\"swUrl\",\"config\",\"navigator\",\"serviceWorker\",\"register\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"controller\",\"console\",\"log\",\"onUpdate\",\"onSuccess\",\"catch\",\"ReactDOM\",\"render\",\"react_router_dom\",\"src_App\",\"document\",\"getElementById\",\"URL\",\"process\",\"href\",\"origin\",\"addEventListener\",\"concat\",\"response\",\"contentType\",\"headers\",\"get\",\"status\",\"indexOf\",\"ready\",\"unregister\",\"reload\",\"checkValidServiceWorker\"],\"mappings\":\"kQAyEeA,cArEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALMV,mFASG,IAAAW,EAAAR,KAClBS,GAAAA,CAAM,2EACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZR,UAAU,EACVC,MAAOM,EAAON,SAMlB,SAACF,GACCG,EAAKM,SAAS,CACZR,UAAU,EACVD,MAAAA,uCAMD,IAAAU,EAC4Bf,KAAKI,MAAhCC,EADDU,EACCV,MAAOC,EADRS,EACQT,SAAUC,EADlBQ,EACkBR,MACzB,OAAIF,EACKW,EAAAC,EAAAC,cAAA,MAAA,KAAA,UAAab,EAAMc,SAChBb,EAIRU,EAAAC,EAAAC,cAAA,QAAA,KACIF,EAAAC,EAAAC,cAAA,QAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KAAA,OACAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,QACAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,SAGRF,EAAAC,EAAAC,cAAA,QAAA,KACCX,EAAMa,IAAI,SAAAC,GAAI,OACXL,EAAAC,EAAAC,cAAA,KAAA,CAAII,IAAKD,EAAKE,IACVP,EAAAC,EAAAC,cAAA,KAAA,KAEIF,EAAAC,EAAAC,cAAA,MAAA,CAAKM,IAAI,oBAAoBC,IAAI,SAErCT,EAAAC,EAAAC,cAAA,KAAA,KACKG,EAAKK,OAEVV,EAAAC,EAAAC,cAAA,KAAA,KACKG,EAAKM,UAtBjBX,EAAAC,EAAAC,cAAA,MAAA,KAAA,qBArCQU,EAAAA,WCOVC,mLANP,OACIb,EAAAC,EAAAC,cAAA,KAAA,KAAA,iBAHiBU,EAAAA,WCcdE,mLATX,OACEd,EAAAC,EAAAC,cAAA,MAAA,CAAKa,UAAU,iBACbf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWvC,IACrCqB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,UAAWL,YAL/BD,EAAAA,WCOZO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThC,KAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BU,MAAM,SAAApD,GACLgD,QAAQhD,MAAM,4CAA6CA,iBClFjEqD,EAAAA,EAASC,OAAO3C,EAAAC,EAAAC,cAPM,WAAA,OAClBF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAD,QAKU,MAAmBC,SAASC,eAAe,SDQpD,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMJ,GAAN,sBAEP9B,GAgEV,SAAiCO,EAAOC,GAEtClC,MAAMiC,GACHhC,KAAK,SAAA4D,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAMlE,KAAK,SAAAqC,GACjCA,EAAa8B,aAAanE,KAAK,WAC7B2B,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAMlE,KAAK,WACjC2C,QAAQC,IACN,gHAMJb,EAAgBC,EAAOC,MC/B/BE\",\"sourcesContent\":[\"import React, { Component } from 'react';\\r\\nimport fetch from 'isomorphic-fetch'\\r\\n\\r\\nclass searchUser extends Component {\\r\\n    constructor(props) {\\r\\n        super(props);\\r\\n        this.state = {\\r\\n          error: null,\\r\\n          isLoaded: false,\\r\\n          items: []\\r\\n        };\\r\\n      }\\r\\n    \\r\\n      componentDidMount() {\\r\\n        fetch(\\\"https://api.github.com/search/users?q=tom+repos:%3E42+followers:%3E1000\\\")\\r\\n          .then(res => res.json())\\r\\n          .then(\\r\\n            (result) => {\\r\\n              this.setState({\\r\\n                isLoaded: true,\\r\\n                items: result.items\\r\\n              });\\r\\n            },\\r\\n            // Note: it's important to handle errors here\\r\\n            // instead of a catch() block so that we don't swallow\\r\\n            // exceptions from actual bugs in components.\\r\\n            (error) => {\\r\\n              this.setState({\\r\\n                isLoaded: true,\\r\\n                error\\r\\n              });\\r\\n            }\\r\\n          )\\r\\n      }\\r\\n    \\r\\n      render() {\\r\\n        const { error, isLoaded, items } = this.state;\\r\\n        if (error) {\\r\\n          return <div>Error: {error.message}</div>;\\r\\n        } else if (!isLoaded) {\\r\\n          return <div>Loading...</div>;\\r\\n        } else {\\r\\n          return (\\r\\n            <table>\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <td>Pic</td>\\r\\n                        <td>User</td>\\r\\n                        <td>URL</td>\\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                {items.map(item => (\\r\\n                    <tr key={item.id}>\\r\\n                        <td>\\r\\n                            \\r\\n                            <img src=\\\"{item.avatar_url}\\\" alt=\\\"PIC\\\"></img>\\r\\n                        </td>             \\r\\n                        <td>\\r\\n                            {item.login} \\r\\n                        </td>                 \\r\\n                        <td>\\r\\n                            {item.url}\\r\\n                        </td> \\r\\n                    </tr>\\r\\n                ))}\\r\\n                </tbody>\\r\\n            </table>\\r\\n          );\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    \\r\\nexport default searchUser\",\"import React, { Component } from 'react';\\r\\n\\r\\nclass viewUserDetail extends Component {\\r\\n    render() {\\r\\n        return (\\r\\n            <h1>Detail</h1>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\nexport default viewUserDetail\",\"import React, { Component } from 'react'\\nimport { Route } from 'react-router-dom'\\nimport searchUser from './searchUser';\\nimport viewUserDetail from './viewUserDetail';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App container\\\">\\n        <Route path=\\\"/searchUser\\\" component={searchUser} />\\n        <Route path=\\\"/viewUserDetail\\\" component={viewUserDetail} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport { BrowserRouter } from 'react-router-dom'\\n\\nconst AppWithRouter = () => (\\n    <BrowserRouter>\\n      <App />\\n    </BrowserRouter>\\n  )\\n\\n  \\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.register();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{23:function(e,t,n){e.exports=n(38)},28:function(e,t,n){},38:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(19),i=n.n(o),c=(n(28),n(6)),l=n(7),s=n(9),u=n(8),d=n(10),f=n(5),m=n(20),h=n.n(m),p=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(s.a)(this,Object(u.a)(t).call(this,e))).state={error:null,isLoaded:!1,items:[]},n}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;h()(\"https://api.github.com/search/users?q=tom+repos:%3E42+followers:%3E1000\").then(function(e){return e.json()}).then(function(t){e.setState({isLoaded:!0,items:t.items})},function(t){e.setState({isLoaded:!0,error:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.error,n=e.isLoaded,a=e.items;return t?r.a.createElement(\"div\",null,\"Error: \",t.message):n?r.a.createElement(\"table\",null,r.a.createElement(\"thead\",null,r.a.createElement(\"tr\",null,r.a.createElement(\"td\",null,\"Pic\"),r.a.createElement(\"td\",null,\"User\"),r.a.createElement(\"td\",null,\"URL\"))),r.a.createElement(\"tbody\",null,a.map(function(e){return r.a.createElement(\"tr\",{key:e.id},r.a.createElement(\"td\",null,r.a.createElement(\"img\",{src:\"{item.avatar_url}\",alt:\"PIC\"})),r.a.createElement(\"td\",null,e.login),r.a.createElement(\"td\",null,e.url))}))):r.a.createElement(\"div\",null,\"Loading...\")}}]),t}(a.Component),v=function(e){function t(){return Object(c.a)(this,t),Object(s.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"h1\",null,\"Detail\")}}]),t}(a.Component),w=function(e){function t(){return Object(c.a)(this,t),Object(s.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"App container\"},r.a.createElement(f.a,{path:\"/searchUser\",component:p}),r.a.createElement(f.a,{path:\"/viewUserDetail\",component:v}))}}]),t}(a.Component),b=Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function g(e,t){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;null!=n&&(n.onstatechange=function(){\"installed\"===n.state&&(navigator.serviceWorker.controller?(console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\"),t&&t.onUpdate&&t.onUpdate(e)):(console.log(\"Content is cached for offline use.\"),t&&t.onSuccess&&t.onSuccess(e)))})}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}var E=n(13);i.a.render(r.a.createElement(function(){return r.a.createElement(E.a,null,r.a.createElement(w,null))},null),document.getElementById(\"root\")),function(e){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location.href).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var t=\"\".concat(\"\",\"/service-worker.js\");b?(function(e,t){fetch(e).then(function(n){var a=n.headers.get(\"content-type\");404===n.status||null!=a&&-1===a.indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):g(e,t)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(t,e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\")})):g(t,e)})}}()}},[[23,1,2]]]);","extractedComments":[]}